@page "/providers"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using rg_wellbeing.Auth.Models
@using rg_wellbeing.Content
@rendermode InteractiveServer
@inject ProtectedSessionStorage ProtectedSessionStore

<h2>Providers</h2>
<h3>Add Provider</h3>

<EditForm OnSubmit="@OnProviderCreateSubmit" Model="@providerContent" FormName="OnProviderCreateSubmit">
    <div class="form-group">
        <InputTextArea @bind-Value=providerContent.ProviderCreateRequestJson class="form-control json-format" id="ProviderInput" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Create Provider</button>
    </div>
    <div class="@((providerContent.ProviderCreateResponse != null) ? string.Empty : "hidden") alert alert-success" role="alert">
        Provider created successfully with Id: @providerContent.ProviderCreateResponse?.Uuid
    </div>
</EditForm>

<h3>Available Providers</h3>
<div class="@(String.IsNullOrEmpty(ErrorMsg) ? "hidden" : string.Empty) alert alert-danger" role="alert">
    @ErrorMsg
</div>
<ul>
    @if (providersResponse != null)
    {
        @foreach (var provider in providersResponse.Providers.OrderBy(p => p.Name))
        {
            <li>
                <strong>@provider.Name</strong> - @provider.Uuid<br />
                @provider.Disclaimer<br />
                <button @onclick="() => DeleteProvider(provider.Uuid)" class="btn btn-secondary">
                    Delete Provider
                </button>
                <hr />
            </li>
        }
    }
</ul>

@code {
    RgContentManager rgContentManager;
    ProtectedBrowserStorageResult<RgPartnerAuthResponse?> token;

    ProviderViewModel providerContent = new ProviderViewModel();
    RGWellbeingProviderResponse providersResponse;

    public string ErrorMsg { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        token = await ProtectedSessionStore.GetAsync<RgPartnerAuthResponse?>(RgSessionKeys.Token);

        if (!token.Success || token.Value == null)
        {
            throw new InvalidOperationException("You must authenticate before using this page.");
        }

        if (firstRender)
        {
            rgContentManager = new RgContentManager(token.Value, true);

            await LoadProviders();
            StateHasChanged();
        }
    }

    async Task LoadProviders()
    {
        providersResponse = await rgContentManager.GetProviders();

        var now = DateTime.Now.ToString("ddd d M yyyy HH:ss");
        providerContent.ProviderCreateRequestJson = String.Format(@"{{
                ""name"": ""Test Provider {0}"",
                ""disclaimer"": ""Provider Disclaimer""
            }}", now);
    }

    async Task DeleteProvider(string providerUuid)
    {
        try
        {
            await rgContentManager.DeleteProvider(providerUuid);
            providersResponse.Providers.Remove(providersResponse.Providers.Single(p => p.Uuid == providerUuid));            
        }
        catch(Exception ex)
        {
            ErrorMsg = "Unable to Delete Provider: " + ex.Message;
        }
        finally
        { 
            StateHasChanged(); 
        }
    }

    async Task OnProviderCreateSubmit(EditContext editContext)
    {
        //try
        {
            providerContent.ProviderCreateResponse = await rgContentManager.CreateProvider(providerContent.ProviderCreateRequest);

            // reload
            await LoadProviders();
            StateHasChanged();
        }
        //catch (Exception ex)
        {
            
        }
    }

    class ProviderViewModel
    {
        public RgWellbeingProviderCreateRequest ProviderCreateRequest { get; set; }
        public string ProviderCreateRequestJson
        {
            get { return JsonConvert.SerializeObject(ProviderCreateRequest, Formatting.Indented); }
            set
            {
                try
                {
                    ProviderCreateRequest = JsonConvert.DeserializeObject<RgWellbeingProviderCreateRequest>(value) ?? new RgWellbeingProviderCreateRequest();
                }
                catch (Exception ex)
                {
                    throw new InvalidOperationException("Invalid provider create request JSON: " + ex.Message);
                }
            }
        }
        public RgProviderCreateResponse? ProviderCreateResponse { get; set; }
    }
}
