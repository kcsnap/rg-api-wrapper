@page "/wellbeingview"
@using BlazorBootstrap
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using RgWebapp.Components
@using RgWebapp.Services
@using rg_wellbeing.Auth.Models
@using rg_wellbeing.Content

@rendermode InteractiveServer
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Wellbeing</PageTitle>

<h2>Wellbeing</h2>

<h4>Single Content</h4>
<p>Retrieve content by Id</p>

<EditForm OnSubmit="@OnRetrieveContent" Model="@wellbeingContent.ContentType" FormName="OnRetrieveContent_">
    <div class="form-group">
        <select class="btn btn-outline-primary dropdown-toggle" @bind=@wellbeingContent.ContentType>
            <option value="article">article</option>
            <option value="audio">audio</option>
            <option value="video">video</option>
            <option value="recipe">recipe</option>
        </select>
    </div>
    <div class="form-group">
        <InputText @bind-Value=wellbeingContent.ContentUuid class="form-control" id="WellbeingContentInput" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Retrieve Content</button>
    </div>
    <div>
        <div class="@(String.IsNullOrEmpty(ErrorMsgSingle) ? "hidden" : string.Empty) alert alert-success" role="alert">
            @ErrorMsgSingle
        </div>
    </div>
    <div class="form-group">
        @if (wellbeingContent.RetrieveContentResponse != null)
        {
            <pre>
                @JsonConvert.SerializeObject(JsonConvert.DeserializeObject(wellbeingContent.RetrieveContentResponse), Formatting.Indented)
            </pre>
        }
    </div>
</EditForm>

<hr />

<h4>All Content</h4>
<p>View all live wellbeing content</p>
<select class="btn btn-outline-primary dropdown-toggle" @bind="@wellbeingContent.ContentType">
    <option value="article">article</option>
    <option value="audio">audio</option>
    <option value="video">video</option>
    <option value="recipe">recipe</option>
</select>
<div class="form-group">
    <button @onclick="OnRetrieveAll" type="submit" class="btn btn-primary">Retrieve All</button>
</div>

@if (wellbeingContent.Articles != null)
{
    <pre>@JsonConvert.SerializeObject(JsonConvert.DeserializeObject(wellbeingContent.Articles), Formatting.Indented)</pre>
}
<div>
    <div class="@(String.IsNullOrEmpty(ErrorMsgAll) ? "hidden" : string.Empty) alert alert-success" role="alert">
        @ErrorMsgAll
    </div>
</div>


@code {
    RgContentManager rgContentManager;
    ProtectedBrowserStorageResult<RgPartnerAuthResponse?> token;
    WellbeingContentViewModel wellbeingContent = new WellbeingContentViewModel();

    public string? ErrorMsgSingle { get; set; }
    public string ErrorMsgAll { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        token = await ProtectedSessionStore.GetAsync<RgPartnerAuthResponse?>(RgSessionKeys.Token);

        if (!token.Success || token.Value == null)
        {
            throw new InvalidOperationException("You must authenticate before using this page.");
        }

        if (firstRender)
        {
            rgContentManager = new RgContentManager(token.Value);
        }
    }

    public async Task OnRetrieveAll()
    {
        try
        {
            rgContentManager = new RgContentManager(token.Value);
            wellbeingContent.Articles = await rgContentManager.GetContentAsync(wellbeingContent.ContentType);
            StateHasChanged();
        }
        catch(Exception ex)
        {
            ErrorMsgAll = ex.Message;
            StateHasChanged();
        }
    }

    async Task OnRetrieveContent(EditContext editContext)
    {
        try
        {
            wellbeingContent.RetrieveContentResponse = await rgContentManager.GetContent(wellbeingContent.ContentUuid, wellbeingContent.ContentType);
        }
        catch(Exception ex)
        {
            ErrorMsgSingle = ex.Message;
            StateHasChanged();
        }
    }

    public class WellbeingContentViewModel
    {
        public WellbeingArticle Article { get; set; }

        public string RetrieveContentResponse { get; set; }
        // public string RetrieveContentResponseJson
        // {
        //     get { return JsonConvert.SerializeObject(RetrieveContentResponse, Formatting.Indented); }
        //     set
        //     {
        //         try
        //         {
        //             RetrieveContentResponse = JsonConvert.DeserializeObject<GetArticleContent>(value) ?? new GetArticleContent();
        //         }
        //         catch (Exception ex)
        //         {
        //             throw new InvalidOperationException("Invalid content create request JSON: " + ex.Message);
        //         }
        //     }
        // }

        // public IList<WellbeingArticle> Articles { get; set; }
        public string Articles { get; set; }

        public string ContentUuid { get; set; }
        public string ContentType { get; set; } = "article";
    }

    public class WellbeingArticle
    {
        public string Title { get; set; }
    }
}