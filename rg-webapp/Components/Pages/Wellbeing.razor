@page "/wellbeing"
@using BlazorBootstrap
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using rg_wellbeing.Auth.Models
@using rg_wellbeing.Content
@rendermode InteractiveServer
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Wellbeing</PageTitle>

<h2>Wellbeing</h2>

<p>Description tbd</p>

<div>
    <table>
        <tr>
            <td style="width:70%;vertical-align:top">
                <h4>Guide</h4>

                @* <p>0. Select content type...</p>
                <Dropdown Color="DropdownColor.Primary">
                    <DropdownToggleButton>Select Content Type</DropdownToggleButton>
                    <DropdownMenu>
                        <DropdownItem To="#" Type="DropdownItemType.Link">Article</DropdownItem>
                        <DropdownItem To="#" Type="DropdownItemType.Link">Audio</DropdownItem>
                        <DropdownItem To="#" Type="DropdownItemType.Link">...more coming soon</DropdownItem>
                    </DropdownMenu>
                </Dropdown> *@

                <p>0. Load sample request</p>
                <div class="form-group">
                    <button @onclick="LoadArticleContent" class="btn btn-secondary">
                        Load Article
                    </button>
                    <button @onclick="LoadAudioContent" class="btn btn-secondary">
                        Load Audio
                    </button>
                </div>


                <p>1. Create content placeholder...</p>
                <EditForm OnSubmit="@OnContentCreateSubmit" Model="@wellbeingContent" FormName="OnContentCreateSubmit">
                    <div class="form-group">
                        <InputTextArea @bind-Value=wellbeingContent.ContentCreateRequestJson class="form-control json-format" id="WellbeingContentInput" />
                    </div>                    
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Create Content</button>
                    </div>
                    <div class="@((wellbeingContent.ContentCreateResponse != null) ? string.Empty : "hidden") alert alert-success" role="alert">
                        Content Placeholder created successfully with Id: @wellbeingContent.ContentCreateResponse?.Uuid
                    </div>
                </EditForm>

                <Tabs>
                    <Tab Title="Article" Active="true">
                        <Content>
                            <p>2. Create article within Content...</p>
                            <EditForm OnSubmit="@OnArticleCreateSubmit" Model="@wellbeingContent" FormName="OnArticleCreateSubmit">
                                <div class="form-group">
                                    <InputTextArea @bind-Value=wellbeingContent.ArticleHtmlRequest class="form-control json-format" id="WellbeingArticleInput" />
                                </div>
                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary">Create Article</button>
                                </div>
                                <div class="@((wellbeingContent.ArticleCreateResponse != null) ? string.Empty : "hidden") alert alert-success" role="alert">
                                    Article created successfully with Id: @wellbeingContent.ArticleCreateResponse?.Uuids[0]
                                </div>
                            </EditForm>

                            <div class="alert alert-info">
                                To update 'Content' (information uploaded in step 1) - a PUT is required outside of the article scope <a href="#">here</a>
                            </div>

                            <p>3. Update article within Content...</p>
                            <EditForm OnSubmit="@OnArticleUpdateSubmit" Model="@wellbeingContent" FormName="OnArticleUpdateSubmit">
                                <div class="form-group">
                                    <InputTextArea @bind-Value=wellbeingContent.UpdatedArticleHtmlRequest class="form-control json-format" id="WellbeingArticleInput" />
                                </div>
                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary">Update Article</button>
                                </div>
                                <div class="@((wellbeingContent.ArticleUpdateResponse != null) ? string.Empty : "hidden") alert alert-success" role="alert">
                                    Article updated successfully with Id: @wellbeingContent.ArticleUpdateResponse?.content.uuid
                                </div>
                            </EditForm>

                            <p>4. Delete article within Content...</p>
                            <EditForm OnSubmit="@OnArticleDeleteSubmit" Model="@wellbeingContent" FormName="OnArticleDeleteSubmit">
                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary">Delete Article</button>
                                </div>
                                <div class="@((wellbeingContent.ArticleIsDeleted) ? string.Empty : "hidden") alert alert-success" role="alert">
                                    Article deleted successfully
                                </div>
                            </EditForm>
                        </Content>
                    </Tab>
                    <Tab Title="Audios">
                        <Content>
                            <p>2. Create Audio within Content...</p>
                            <EditForm OnSubmit="@OnAudioCreateSubmit" Model="@wellbeingContent" FormName="OnAudioCreateSubmit">
                                <div class="form-group">
                                    <InputTextArea @bind-Value=wellbeingContent.AudioFileRequest class="form-control json-format" id="WellbeingAudioInput" />
                                </div>
                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary">Create Audio</button>
                                </div>
                                <div class="@((wellbeingContent.AudioCreateResponse != null) ? string.Empty : "hidden") alert alert-success" role="alert">
                                    Audio created successfully with Id: @wellbeingContent.AudioCreateResponse?.Uuids[0]
                                </div>
                            </EditForm>

                            <div class="alert alert-info">
                                To update 'Content' (information uploaded in step 1) - a PUT is required outside of the audio scope <a href="#">here</a>
                            </div>

                            <p>3. Update audio within Content...</p>
                            <EditForm OnSubmit="@OnAudioUpdateSubmit" Model="@wellbeingContent" FormName="OnAudioUpdateSubmit">
                                <div class="form-group">
                                    <InputTextArea @bind-Value=wellbeingContent.UpdatedAudioFileRequest class="form-control json-format" id="WellbeingAudioInput" />
                                </div>
                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary">Update Audio</button>
                                </div>
                                <div class="@((wellbeingContent.AudioUpdateResponse != null) ? string.Empty : "hidden") alert alert-success" role="alert">
                                    Audio updated successfully with Id: @wellbeingContent.AudioUpdateResponse?.content.uuid
                                </div>
                            </EditForm>

                            <p>4. Delete audio within Content...</p>
                            <EditForm OnSubmit="@OnAudioDeleteSubmit" Model="@wellbeingContent" FormName="OnAudioDeleteSubmit">
                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary">Delete Audio</button>
                                </div>
                                <div class="@((wellbeingContent.AudioIsDeleted) ? string.Empty : "hidden") alert alert-success" role="alert">
                                    Audio deleted successfully
                                </div>
                            </EditForm>

                        </Content>
                    </Tab>
                </Tabs>

                <p>X. Update Content...</p>
                <EditForm OnSubmit="@OnContentUpdateSubmit" Model="@wellbeingContent" FormName="OnContentUpdateSubmit">
                    <div class="form-group">
                        <InputTextArea @bind-Value=wellbeingContent.ContentUpdateRequestJson class="form-control json-format" id="WellbeingContentInput" />
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Update Content</button>
                    </div>
                    <div class="@((wellbeingContent.ContentUpdateResponse != null) ? string.Empty : "hidden") alert alert-success" role="alert">
                        Content updated successfully with Id: @wellbeingContent.ContentUpdateResponse?.Uuid
                    </div>
                </EditForm>

            </td>
            <td style="font-size:8pt">
                <h5>Providers</h5>
                <ul>
                    @if (providersResponse != null)
                    {
                        @foreach (var provider in providersResponse.Providers.OrderBy(p => p.Name))
                        {
                            <li>
                                <strong>@provider.Name</strong> - @provider.Uuid
                            </li>
                        }
                    }
                </ul>

                <h5>Topics</h5>
                <ul>
                    @if (topicsResponse != null)
                    {
                        @foreach (var topic in topicsResponse.Topics.OrderBy(p => p.Name))
                        {
                            <li>
                                <strong>@topic.Id: @topic.Name (@topic.Type | @topic.Label)</strong> - @topic.Uuid
                            </li>
                        }
                    }
                </ul>

                <h5>Tags</h5>
                <ul>
                    @if (tagsResponse != null)
                    {
                        @foreach (var tag in tagsResponse.Tags.OrderBy(p => p.Title))
                        {
                            <li>
                                <strong>@tag.Title</strong> - @tag.Uuid
                            </li>
                        }
                    }
                </ul>
            </td>
        </tr>
    </table>
</div>

@code {
    RgContentManager rgContentManager;
    RGWellbeingProviderResponse providersResponse;
    RGWellbeingTopicsResponse topicsResponse;
    RGWellbeingTagsResponse tagsResponse;

    WellbeingContentViewModel wellbeingContent = new WellbeingContentViewModel();
    ProtectedBrowserStorageResult<RgPartnerAuthResponse?> token;

    public void LoadArticleContent()
    {
        wellbeingContent.ContentCreateRequest = new RgWellbeingContentCreateRequest()
            {
                Thumbnail = "https://images.unsplash.com/photo-1746457002269-106424d702e4?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHwxN3x8fGVufDB8fHx8fA%3D%3D",
                Description = DateTime.Now.ToString("ddd d MM yyyy HH:mm:ss") + "Join Coxy in this 15-minute video",
                Title = DateTime.Now.ToString("ddd d MM yyyy HH:mm:ss") + " Ear tension release",
                ContentType = "article",
                Provider = providersResponse.Providers[0].Uuid,
                TopicUuid = topicsResponse.Topics[1].Uuid, // 0 is 'Featured' - don't reuse this, 1 is workout
                LanguageCode = "en",
                TagIds = new List<string> // default to first 2 tags for now...
                {
                    "f417fca0-52a9-4701-837a-2a7c4509f17a",
                    "45be55a9-b733-41b4-91a3-ce111e34c3c5",
                    "50c38c1b-3476-4eab-bb71-c0dd2c94a29d"
                    //relevantTags[0].Uuid,
                    //relevantTags[1].Uuid
                }
            };
        wellbeingContent.ContentUpdateRequest = new RgWellbeingContentUpdateRequest()
            {
                Thumbnail = "https://images.unsplash.com/photo-1746457002269-106424d702e4?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHwxN3x8fGVufDB8fHx8fA%3D%3D",
                Description = "UPDATED " + DateTime.Now.ToString("ddd d MM yyyy HH:mm:ss") + "Join Coxy in this 15-minute video",
                Title = "UPDATED " + DateTime.Now.ToString("ddd d MM yyyy HH:mm:ss") + " Ear tension release",
                ContentType = "article",
                Provider = providersResponse.Providers[0].Uuid,
                TopicUuid = topicsResponse.Topics[1].Uuid, // 0 is 'Featured' - don't reuse this, 1 is workout
                LanguageCode = "en",
                TagIds = new List<string> // default to first 2 tags for now...
                {
                    "6f5d49a8-a81d-47c8-b4cd-9b0d02c0a066"
                }
            };
    }
    public void LoadAudioContent() => wellbeingContent.ContentCreateRequest = new RgWellbeingContentCreateRequest()
        {
            Thumbnail = "https://images.unsplash.com/photo-1746457002269-106424d702e4?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHwxN3x8fGVufDB8fHx8fA%3D%3D",
            Description = DateTime.Now.ToString("ddd d MM yyyy HH:mm:ss") + "Join Coxy in this 15-minute video",
            Title = DateTime.Now.ToString("ddd d MM yyyy HH:mm:ss") + " Ear tension release",
            ContentType = "audio",
            Provider = providersResponse.Providers[0].Uuid,
            TopicUuid = topicsResponse.Topics[1].Uuid, // 0 is 'Featured' - don't reuse this, 1 is workout
            LanguageCode = "en",
            TagIds = new List<string> // default to first 2 tags for now...
                {
                    "f417fca0-52a9-4701-837a-2a7c4509f17a",
                    "45be55a9-b733-41b4-91a3-ce111e34c3c5",
                    "50c38c1b-3476-4eab-bb71-c0dd2c94a29d"
                    //relevantTags[0].Uuid,
                    //relevantTags[1].Uuid
                }
        };

    async Task GetArticleContent() 
    {
        wellbeingContent.ArticleGetResponse = await rgContentManager.GetArticle(wellbeingContent.ContentCreateResponse.Uuid);
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        token = await ProtectedSessionStore.GetAsync<RgPartnerAuthResponse?>(RgSessionKeys.Token);

        if (!token.Success || token.Value == null)
        {
            throw new InvalidOperationException("You must authenticate before using this page.");
        }

        if (firstRender)
        {
            rgContentManager = new RgContentManager(token.Value, true);
            providersResponse = await rgContentManager.GetProviders();
            topicsResponse = await rgContentManager.GetTopics();
            tagsResponse = await rgContentManager.GetTags();

            // default article content
            var now = DateTime.Now.ToString("ddd d M yyyy HH:ss");
            wellbeingContent.ArticleHtmlRequest = "<p>Today is " + now + "</p>";
            wellbeingContent.AudioFileRequest = "https://cdn.freesound.org/previews/511/511888_3082984-lq.mp3";

            #region to restore for recipe
            // wellbeingContent.RecipeJsonRequest = String.Format(@"
            //     {{
            //         ""content"": {{
            //             ""description"": ""{0} Here is a deliciously filling smoothie for breakfast. Only five ingredients are needed, and it will fill you up until lunch!"",
            //             ""difficultyLevel"": 1,
            //             ""stats"": [
            //                 {{
            //                     ""type"": ""prepTime"",
            //                     ""unit"": ""min"",
            //                     ""value"": ""5""
            //                 }},
            //                 {{
            //                     ""type"": ""servings"",
            //                     ""unit"": ""quantity"",
            //                     ""value"": ""1""
            //                 }},
            //                 {{
            //                     ""type"": ""calories"",
            //                     ""unit"": ""cCal"",
            //                     ""value"": ""200""
            //                 }}
            //             ],
            //             ""ingredients"": [
            //                 {{
            //                     ""value"": ""1"",
            //                     ""unit"": ""quantity"",
            //                     ""type"": ""banana""
            //                 }},
            //                 {{
            //                     ""value"": ""0.5"",
            //                     ""unit"": ""cup"",
            //                     ""type"": ""oats""
            //                 }},
            //                 {{
            //                     ""value"": ""0.25"",
            //                     ""unit"": ""cup"",
            //                     ""type"": ""greek yogurt""
            //                 }},
            //                 {{
            //                     ""value"": ""1"",
            //                     ""unit"": ""tbsp"",
            //                     ""type"": ""honey""
            //                 }}
            //             ],
            //             ""instructions"": [
            //                 ""Add all the ingredients to a blender"",
            //                 ""Blend until smooth"",
            //                 ""Pour into a glass and enjoy!""
            //             ]
            //         }}
            //     }}", now);
            #endregion

            StateHasChanged();
        }
    }

    async Task OnContentCreateSubmit(EditContext editContext)
    {
        try
        {
            // create content
            wellbeingContent.ContentCreateResponse = await rgContentManager.CreateContent(wellbeingContent.ContentCreateRequest);
            wellbeingContent.ArticleHtmlRequest = "<p>CREATED Time is " + DateTime.Now.ToString("ddd d M yyyy HH:mm:ss") + "</p>";
        }
        catch (Exception ex)
        {
            // errorMessage = ex.Message;
            // showError = true;
        }
    }

    async Task OnArticleCreateSubmit(EditContext editContext)
    {
        //try
        {
            // create content
            wellbeingContent.ArticleCreateResponse = await rgContentManager.UploadArticle(wellbeingContent.ContentCreateResponse.Uuid, wellbeingContent.ArticleHtmlRequest);
            wellbeingContent.UpdatedArticleHtmlRequest = "<p>UPDATED Time is " + DateTime.Now.ToString("ddd d M yyyy HH:mm:ss") + "</p>";

        }
        //catch (Exception ex)
        {
            // errorMessage = ex.Message;
            // showError = true;
        }
    }

    async Task OnArticleUpdateSubmit(EditContext editContext)
    {
        //try
        {
            // create content
            wellbeingContent.ArticleUpdateResponse = await rgContentManager.ChangeArticle(wellbeingContent.ArticleCreateResponse.Uuids[0], wellbeingContent.UpdatedArticleHtmlRequest);
        }
        //catch (Exception ex)
        {
            // errorMessage = ex.Message;
            // showError = true;
        }
    }

    async Task OnArticleDeleteSubmit(EditContext editContext)
    {
        //try
        {
            // create content
            wellbeingContent.ArticleDeleteResponse = await rgContentManager.DeleteArticle(wellbeingContent.ContentCreateResponse.Uuid, "article");
            wellbeingContent.ArticleIsDeleted = true;
            StateHasChanged();
        }
        //catch (Exception ex)
        {
            // errorMessage = ex.Message;
            // showError = true;
        }
    }

    async Task OnContentUpdateSubmit(EditContext editContext)
    {
        //try
        {
            // create content
            wellbeingContent.ContentUpdateResponse = await rgContentManager.ChangeContent(wellbeingContent.ContentCreateResponse.Uuid, wellbeingContent.ContentUpdateRequest);
        }
        //catch (Exception ex)
        {
            // errorMessage = ex.Message;
            // showError = true;
        }
    }

    async Task OnAudioCreateSubmit(EditContext editContext)
    {
        //try
        {
            // create content
            wellbeingContent.AudioCreateResponse = await rgContentManager.UploadAudio(wellbeingContent.ContentCreateResponse.Uuid, wellbeingContent.AudioFileRequest);
            wellbeingContent.UpdatedAudioFileRequest = "https://cdn.freesound.org/previews/810/810753_17437502-lq.mp3";

        }
        //catch (Exception ex)
        {
            // errorMessage = ex.Message;
            // showError = true;
        }
    }

    async Task OnAudioUpdateSubmit(EditContext editContext)
    {
        //try
        {
            // create content
            wellbeingContent.AudioUpdateResponse = await rgContentManager.ChangeAudio(wellbeingContent.ContentCreateResponse.Uuid, wellbeingContent.UpdatedAudioFileRequest);
        }
        //catch (Exception ex)
        {
            // errorMessage = ex.Message;
            // showError = true;
        }
    }

    async Task OnAudioDeleteSubmit(EditContext editContext)
    {
        try
        {
            // create content
            wellbeingContent.AudioDeleteResponse = await rgContentManager.DeleteAudio(wellbeingContent.ContentCreateResponse.Uuid, "audio");
            wellbeingContent.AudioIsDeleted = true;
        }
        catch (Exception ex)
        {
            // errorMessage = ex.Message;
            // showError = true;
        }
    }



    public class WellbeingContentViewModel
    {
        // content
        public string Content { get; set; } = string.Empty;

        public RgWellbeingContentCreateRequest ContentCreateRequest { get; set; }
        public string ContentCreateRequestJson 
        { 
            get { return JsonConvert.SerializeObject(ContentCreateRequest, Formatting.Indented); }
            set
            {
                try
                {
                    ContentCreateRequest = JsonConvert.DeserializeObject<RgWellbeingContentCreateRequest>(value) ?? new RgWellbeingContentCreateRequest();
                }
                catch (Exception ex)
                {
                    throw new InvalidOperationException("Invalid content create request JSON: " + ex.Message);
                }
            }
        }
        public RgWellbeingContentCreateResponse ContentCreateResponse { get; set; }

        public RgWellbeingContentUpdateRequest ContentUpdateRequest { get; set; }
        public string ContentUpdateRequestJson
        {
            get { return JsonConvert.SerializeObject(ContentUpdateRequest, Formatting.Indented); }
            set
            {
                try
                {
                    ContentUpdateRequest = JsonConvert.DeserializeObject<RgWellbeingContentUpdateRequest>(value) ?? new RgWellbeingContentUpdateRequest();
                }
                catch (Exception ex)
                {
                    throw new InvalidOperationException("Invalid content create request JSON: " + ex.Message);
                }
            }
        }
        public RgWellbeingContentUpdateResponse ContentUpdateResponse { get; set; }
        
        // articles
        public RgWellbeingArticleUploadResponse ArticleCreateResponse { get; set; }
        public RgWellbeingArticleDeleteResponse ArticleDeleteResponse { get; set; }
        public RgWellbeingArticlePatchResponse ArticleUpdateResponse { get; set; }

        public string ArticleGetResponse { get; set; }
        public string ArticleHtmlRequest { get; set; }
        public string UpdatedArticleHtmlRequest { get; set; }
        public bool ArticleIsDeleted { get; set; }

        // audio        
        public RgWellbeingAudioUploadResponse AudioCreateResponse { get; set; }
        public RgWellbeingAudioDeleteResponse AudioDeleteResponse { get; set; }
        public RgWellbeingAudioPatchResponse AudioUpdateResponse { get; set; }

        public string AudioFileRequest { get; set; }
        public string UpdatedAudioFileRequest { get; set; }
        public bool AudioIsDeleted { get; set; }

    }
}